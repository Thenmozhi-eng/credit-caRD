# -*- coding: utf-8 -*-
"""credit _card_fraud_detction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_6q9BJMYQenssrqB0A1FKAM_PLbnex7-
"""

!pip install gradio

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import gradio as gr
import warnings
warnings.filterwarnings('ignore')

# Load dataset
df = pd.read_csv("/content/creditcard.csv")  # Make sure this file is in your working directory
df.head()

# Check for missing values
print(df.isnull().sum())

# Scale the 'Amount' column
scaler = StandardScaler()
df['scaled_amount'] = scaler.fit_transform(df[['Amount']])
df.drop(['Time', 'Amount'], axis=1, inplace=True)

# Fraudulent vs non-fraudulent class distribution
sns.countplot(x='Class', data=df)
plt.title("Class Distribution (0 = Legit, 1 = Fraud)")
plt.show()

# Correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), cmap='coolwarm', center=0)
plt.title("Correlation Matrix")
plt.show()

# Features and target
X = df.drop('Class', axis=1)
y = df['Class']

# Check for NaN values in 'y' and handle them
if y.isnull().any():
    # Option 1: Remove rows with NaN values in 'y'
    # df = df.dropna(subset=['Class'])
    # X = df.drop('Class', axis=1)
    # y = df['Class']

    # Option 2: Replace NaN values with a specific value (e.g., 0)
    y = y.fillna(0)

# Train/test split with stratification
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

# Metrics
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print(f"ROC AUC Score: {roc_auc_score(y_test, y_proba):.4f}")

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.figure(figsize=(8, 5))
plt.plot(fpr, tpr, label='ROC Curve (area = %0.2f)' % roc_auc_score(y_test, y_proba))
plt.plot([0, 1], [0, 1], linestyle='--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()

def predict_fraud(*inputs):
    input_df = pd.DataFrame([inputs], columns=X.columns)
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]
    return {
        "Prediction": "Fraud" if prediction == 1 else "Legit",
        "Confidence": f"{probability:.2%}"
    }

# Interface
gradio_inputs = [gr.Number(label=col) for col in X.columns]

interface = gr.Interface(
    fn=predict_fraud,
    inputs=gradio_inputs,
    outputs=["text", "text"],
    title="Credit Card Fraud Detection",
    description="Enter transaction features to predict if it's fraud or not"
)

interface.launch()

